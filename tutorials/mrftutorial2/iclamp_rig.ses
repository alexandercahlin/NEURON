objectvar save_window_, rvp_
objectvar scene_vector_[7]
objectvar ocbox_, ocbox_list_, scene_, scene_list_
{ocbox_list_ = new List()  scene_list_ = new List()}
{pwman_place(124,124)}

//Begin PointProcessManager
{
load_file("pointman.hoc")
}
{
soma ocbox_ = new PointProcessManager(0)
}
{object_push(ocbox_)}
{
mt.select("IClamp") i = mt.selected()
ms[i] = new MechanismStandard("IClamp")
ms[i].set("del", 1, 0)
ms[i].set("dur", 0.5, 0)
ms[i].set("amp", 1, 0)
mt.select("IClamp") i = mt.selected() maction(i)
hoc_ac_ = 0.5
sec.sec move() d1.flip_to(0)
}
{object_pop() doNotify()}
{
ocbox_ = ocbox_.v1
ocbox_.map("PointProcessManager", 10, 528, 222.3, 339.3)
}
objref ocbox_
//End PointProcessManager

{
xpanel("NEURON Main Menu", 0)
xmenu("File", 0)
xbutton("load session","load(\"*.ses\", 1)")
xbutton("load hoc","load(\"*.hoc\", 0)")
xbutton("load dll","load(\"*.dll\", 2)")
xbutton("save session","save_ses_nrnmainmenu()")
xbutton("working dir","change_working_dir()")
xmenu("recent dir", 0)
xbutton("Print","print_session(0)")
xbutton("Quit","quit()")
xmenu()
xmenu("Build", 1)
xbutton("single compartment","load_file(\"single.hoc\") makesinglecompartment()")
xbutton("Cell Builder","load_file(\"celbild.hoc\") makecellbuilder()")
xmenu("NetWork Cell", 0)
xbutton("From Cell Builder","load_file(\"netbild.hoc\") makenetreadycell()")
xbutton("Artificial Cell","load_file(\"netbild.hoc\") makeartcelltype()")
xmenu()
xbutton("NetWork Builder","load_file(\"netbild.hoc\") makenetbuilder()")
xbutton("Linear Circuit","load_file(\"lincir.hoc\") makeCircuit()")
xmenu("Channel Builder", 0)
xbutton("Density","load_file(\"chanbild.hoc\", \"ChannelBuild\") chanbild(1)")
xbutton("Point","load_file(\"chanbild.hoc\", \"ChannelBuild\") chanbild(0)")
xmenu("import KSChan", 0)
xmenu()
xmenu()
xmenu("Tools", 1)
xbutton("RunControl","nrncontrolmenu()")
xbutton("RunButton","xpanel(\"Run\") xcheckbox(\"Init & Run\", &running_,\"runbutton()\") xpanel()")
xbutton("VariableStepControl","numericalmethodpanel.map()")
xbutton("Parallel Computing","load_file(\"parcom.hoc\", \"ParallelComputeTool\") execute(\"ParallelComputeTool[0].map()\")")
xmenu("Point Processes", 0)
xmenu("Managers", 0)
xbutton("Point Manager","load_file(\"pointman.hoc\") makeppm()")
xbutton("Point Group","load_file(\"pointgrp.hoc\") makeppgm()")
xbutton("Electrode","load_file(\"electrod.hoc\") makeelectrode()")
xmenu()
xmenu("Viewers", 0)
xmenu()
xmenu("Distributed Mechanisms", 0)
xmenu("Managers", 0)
xbutton("Inserter","load_file(\"inserter.hoc\", \"Inserter\") makeinserter()")
xbutton("Homogeneous Spec","load_file(\"showmech.hoc\") makeshowmechanism()")
xmenu()
xmenu("Viewers", 0)
xbutton("celsius","celsius_panel()")
xbutton("globalRa","globalra_panel()")
xmenu()
xmenu("Fitting", 0)
xbutton("Parameterized Function","load_file(\"funfit.hoc\") makefitter()")
xbutton("Run Fitter","load_file(\"runfit.hoc\") makerunfitter()")
xbutton("Multiple Run Fitter","load_file(\"mulfit.hoc\") makemulrunfitter()")
xmenu()
xmenu("Impedance", 0)
xbutton("Frequency","load_file(\"impratio.hoc\") makeImpRatio()")
xbutton("Path","load_file(\"impedanx.hoc\") makeImpx()")
xbutton("log(A) vs x","load_file(\"logax.hoc\") makelogax()")
xbutton("Shape","load_file(\"attshape.hoc\") makeImpShape()")
xmenu()
xbutton("Model View","load_file(\"mview.hoc\", \"ModelView\") execute(\"mview()\")")
xbutton("Movie Run","load_file(\"movierun.hoc\") movierunpanel()")
xmenu("Miscellaneous", 0)
xmenu()
xmenu("Graph", 1)
xbutton("Voltage axis","newPlotV()")
xbutton("Current axis","newPlotI()")
xbutton("State axis","newPlotS()")
xbutton("Shape plot","newshapeplot()")
xbutton("Vector movie","newvectorplot()")
xbutton("Phase Plane","newphaseplane()")
xbutton("Grapher","load_file(\"grapher.hoc\") makegrapher(1)")
xmenu()
xmenu("Vector", 1)
xbutton("Save to File","load_file(\"stdlib.hoc\",\"clipboard_save\") clipboard_save()")
xbutton("Retrieve from File","load_file(\"stdlib.hoc\",\"clipboard_retrieve\") clipboard_retrieve()")
xbutton("Gather Values","load_file(\"gatherv.hoc\") makeGatherVec()")
xbutton("Play","load_file(\"vplay.hoc\") makeVectorPlay()")
xbutton("Display","load_file(\"vecwrap.hoc\") makeVecWrap()")
xbutton("Draw","load_file(\"mkcurve.hoc\") makeMakeCurve()")
xmenu()
xmenu("Window", 1)
xpanel(-8,0)
}
{
xpanel("RunControl", 0)
v_init = -70
xvalue("Init","v_init", 1,"stdinit()", 1, 1 )
xbutton("Init & Run","run()")
xbutton("Stop","stoprun=1")
runStopAt = 5
xvalue("Continue til","runStopAt", 1,"{continuerun(runStopAt) stoprun=1}", 1, 1 )
runStopIn = 1
xvalue("Continue for","runStopIn", 1,"{continuerun(t + runStopIn) stoprun=1}", 1, 1 )
xbutton("Single Step","steprun()")
t = 200
xvalue("t","t", 2 )
tstop = 200
xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
dt = 0.025
xvalue("dt","dt", 1,"setdt()", 0, 1 )
steps_per_ms = 40
xvalue("Points plotted/ms","steps_per_ms", 1,"setdt()", 0, 1 )
screen_update_invl = 0.05
xvalue("Scrn update invl","screen_update_invl", 1,"", 0, 1 )
realtime = 0.2
xvalue("Real Time","realtime", 0,"", 0, 1 )
xpanel(4,87)
}
{
save_window_ = new Graph(0)
save_window_.size(0,200,-70,-67.1)
scene_vector_[6] = save_window_
{save_window_.view(0, -70, 200, 2.9, 304, 90, 300.6, 200.8)}
graphList[0].append(save_window_)
save_window_.save_name("graphList[0].")
save_window_.addexpr("v(.5)", 1, 1, 0.8, 0.9, 2)
}
{
save_window_ = new Graph(0)
save_window_.size(-10,200,0,1)
scene_vector_[5] = save_window_
{save_window_.view(-10, 0, 210, 1, 301, 418, 308.7, 296.2)}
graphList[1].append(save_window_)
save_window_.save_name("graphList[1].")
save_window_.addexpr("IClamp[0].i", 1, 1, 0.8, 0.9, 2)
}
{
save_window_ = new Graph(0)
save_window_.size(0,200,-80,40)
scene_vector_[4] = save_window_
{save_window_.view(0, -80, 200, 120, 0, 1255, 300.6, 200.8)}
graphList[0].append(save_window_)
save_window_.save_name("graphList[0].")
save_window_.addexpr("v(.5)", 1, 1, 0.8, 0.9, 2)
}
objectvar scene_vector_[1]
{doNotify()}
