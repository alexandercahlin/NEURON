load_file("nrngui.hoc")
load_file("mulfit.hoc")


  objref MRF
	MRF = new MulRunFitter()
  MRF.p.addgen(1)

  MRF.p.pf.title = "Activation Curve"
	MRF.p.mulfit.title = "Activation Curve"

  MRF.p.gmode = 1
	MRF.p.gmodestr="Display"
	MRF.p.gensel(0,1)

  print MRF
  print MRF.p

  objref f1, orig_data
  	orig_data = new Matrix()
  	f1 = new File()
  	f1.ropen("act1.dat")
  	orig_data.scanf(f1)

    for i = 0,1 {
    hoc_obj_[i] = new Vector()
    }

    hoc_obj_[0].copy(orig_data.getcol(1))	// y data
  	hoc_obj_[1].copy(orig_data.getcol(0))	// x data
//MRF.p.pf.generatorlist.object(0).gen.efun()

print MRF.p.pf.generatorlist.object(0).gen.fitness()
print "hello"

    f1.close()
    load_file("params.hoc")

    objref xobj, proxies
    	strdef xstr
    	proxies = new List()
    	proxies.append(new String("k"))
    	proxies.append(new String("vhalf"))

    	for i = 0,proxies.count()-1 {	// the gist of ParmFitnessGUI.addarg(), without displaying the SymChooser to interactively query the user
    		xstr = proxies.object(i).s
    		xobj = new RunFitParm(xstr)	// this might cause problems later, the object is declared at the top-level, not within the ParmFitnessGui object
    		MRF.p.pf.declare(xobj)
    		MRF.p.pf.parmlist.append(xobj)
    		sprint(xstr, "%s.val = %s", xobj, xstr)
    		execute1(xstr)			// not sure why this doesn't have to be executed in the context of the ParmFitnessGui object
    	}

      MRF.p.showargs()
      MRF.p.showdomain()

      MRF.p.gmode = 2
	MRF.p.gmodestr="Toggle"
	MRF.p.gensel(0,1)



  // MRF.p.run()

  sprint(xstr, "mulfit.opt = new %s(pf)", mulfit_optimizers_.object(0).s)
	execute(xstr, MRF.p)
	// MRF.p.mulfit.showopt()

  MRF.opt.nstep = 1

  //MRF.prun()
	// MRF.prun()
	// MRF.prun()
